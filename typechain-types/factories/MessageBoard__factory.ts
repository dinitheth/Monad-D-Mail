/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { MessageBoard, MessageBoardInterface } from "../MessageBoard";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "author",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "text",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "MessageSent",
    type: "event",
  },
  {
    inputs: [],
    name: "getMessageCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "messages",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "author",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "string",
        name: "text",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_recipient",
        type: "address",
      },
      {
        internalType: "string",
        name: "_text",
        type: "string",
      },
    ],
    name: "sendMessage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b50610b47806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630d80fefd14610046578063319339161461007a578063de6f24bb14610098575b600080fd5b610060600480360381019061005b9190610432565b6100b4565b60405161007195949392919061053f565b60405180910390f35b6100826101b2565b60405161008f9190610599565b60405180910390f35b6100b260048036038101906100ad9190610645565b6101bb565b005b60016020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806003018054610129906106d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610155906106d4565b80156101a25780601f10610177576101008083540402835291602001916101a2565b820191906000526020600020905b81548152906001019060200180831161018557829003601f168201915b5050505050908060040154905085565b60008054905090565b60008282905011610201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f890610751565b60405180910390fd5b6040518060a0016040528060005481526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081526020014281525060016000805481526020019081526020016000206000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301908161035b919061094c565b50608082015181600401559050508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f94d6e4822f4adcde26d85197d96befa68dced8d7db67685000cfc97783260da46000548585426040516103ce9493929190610a5a565b60405180910390a36000808154809291906103e890610ac9565b9190505550505050565b600080fd5b600080fd5b6000819050919050565b61040f816103fc565b811461041a57600080fd5b50565b60008135905061042c81610406565b92915050565b600060208284031215610448576104476103f2565b5b60006104568482850161041d565b91505092915050565b610468816103fc565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104998261046e565b9050919050565b6104a98161048e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104e95780820151818401526020810190506104ce565b60008484015250505050565b6000601f19601f8301169050919050565b6000610511826104af565b61051b81856104ba565b935061052b8185602086016104cb565b610534816104f5565b840191505092915050565b600060a082019050610554600083018861045f565b61056160208301876104a0565b61056e60408301866104a0565b81810360608301526105808185610506565b905061058f608083018461045f565b9695505050505050565b60006020820190506105ae600083018461045f565b92915050565b6105bd8161048e565b81146105c857600080fd5b50565b6000813590506105da816105b4565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610605576106046105e0565b5b8235905067ffffffffffffffff811115610622576106216105e5565b5b60208301915083600182028301111561063e5761063d6105ea565b5b9250929050565b60008060006040848603121561065e5761065d6103f2565b5b600061066c868287016105cb565b935050602084013567ffffffffffffffff81111561068d5761068c6103f7565b5b610699868287016105ef565b92509250509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106ec57607f821691505b6020821081036106ff576106fe6106a5565b5b50919050565b7f4d65737361676520746578742063616e6e6f7420626520656d70747900000000600082015250565b600061073b601c836104ba565b915061074682610705565b602082019050919050565b6000602082019050818103600083015261076a8161072e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026108027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826107c5565b61080c86836107c5565b95508019841693508086168417925050509392505050565b6000819050919050565b600061084961084461083f846103fc565b610824565b6103fc565b9050919050565b6000819050919050565b6108638361082e565b61087761086f82610850565b8484546107d2565b825550505050565b600090565b61088c61087f565b61089781848461085a565b505050565b5b818110156108bb576108b0600082610884565b60018101905061089d565b5050565b601f821115610900576108d1816107a0565b6108da846107b5565b810160208510156108e9578190505b6108fd6108f5856107b5565b83018261089c565b50505b505050565b600082821c905092915050565b600061092360001984600802610905565b1980831691505092915050565b600061093c8383610912565b9150826002028217905092915050565b610955826104af565b67ffffffffffffffff81111561096e5761096d610771565b5b61097882546106d4565b6109838282856108bf565b600060209050601f8311600181146109b657600084156109a4578287015190505b6109ae8582610930565b865550610a16565b601f1984166109c4866107a0565b60005b828110156109ec578489015182556001820191506020850194506020810190506109c7565b86831015610a095784890151610a05601f891682610912565b8355505b6001600288020188555050505b505050505050565b82818337600083830152505050565b6000610a3983856104ba565b9350610a46838584610a1e565b610a4f836104f5565b840190509392505050565b6000606082019050610a6f600083018761045f565b8181036020830152610a82818587610a2d565b9050610a91604083018461045f565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ad4826103fc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b0657610b05610a9a565b5b60018201905091905056fea26469706673582212207762ebea944b1e3b9912331bd19e893bc3275e0b69ce4a80ec9373b329d3d0cd64736f6c63430008180033";

type MessageBoardConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MessageBoardConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MessageBoard__factory extends ContractFactory {
  constructor(...args: MessageBoardConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MessageBoard & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MessageBoard__factory {
    return super.connect(runner) as MessageBoard__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MessageBoardInterface {
    return new Interface(_abi) as MessageBoardInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MessageBoard {
    return new Contract(address, _abi, runner) as unknown as MessageBoard;
  }
}
